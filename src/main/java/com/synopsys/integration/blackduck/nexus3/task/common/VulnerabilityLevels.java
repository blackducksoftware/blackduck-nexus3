/**
 * blackduck-nexus3
 *
 * Copyright (C) 2018 Black Duck Software, Inc.
 * http://www.blackducksoftware.com/
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package com.synopsys.integration.blackduck.nexus3.task.common;

import static com.synopsys.integration.blackduck.api.generated.enumeration.ComponentVersionRiskProfileRiskDataCountsCountTypeType.CRITICAL;
import static com.synopsys.integration.blackduck.api.generated.enumeration.ComponentVersionRiskProfileRiskDataCountsCountTypeType.HIGH;
import static com.synopsys.integration.blackduck.api.generated.enumeration.ComponentVersionRiskProfileRiskDataCountsCountTypeType.LOW;
import static com.synopsys.integration.blackduck.api.generated.enumeration.ComponentVersionRiskProfileRiskDataCountsCountTypeType.MEDIUM;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.EnumMap;
import java.util.Map;

import com.synopsys.integration.blackduck.api.generated.enumeration.ComponentVersionRiskProfileRiskDataCountsCountTypeType;

public class VulnerabilityLevels {
    private final Map<ComponentVersionRiskProfileRiskDataCountsCountTypeType, BigDecimal> trackedVulnerabilities;

    public VulnerabilityLevels() {
        trackedVulnerabilities = new EnumMap<>(ComponentVersionRiskProfileRiskDataCountsCountTypeType.class);
        Arrays
            .stream(ComponentVersionRiskProfileRiskDataCountsCountTypeType.values())
            .forEach(value -> trackedVulnerabilities.put(value, BigDecimal.ZERO));
    }

    public void addVulnerability(ComponentVersionRiskProfileRiskDataCountsCountTypeType vulnerability) {
        addXVulnerabilities(vulnerability, BigDecimal.ONE);
    }

    public void addXVulnerabilities(ComponentVersionRiskProfileRiskDataCountsCountTypeType vulnerability, BigDecimal count) {
        if (null != vulnerability && null != count) {
            trackedVulnerabilities.computeIfPresent(vulnerability, (key, value) -> value.add(count));
        }
    }

    public BigDecimal getCriticalVulnerabilityCount() {
        return trackedVulnerabilities.get(CRITICAL);
    }

    public BigDecimal getHighVulnerabilityCount() {
        return trackedVulnerabilities.get(HIGH);
    }

    public BigDecimal getMediumVulnerabilityCount() {
        return trackedVulnerabilities.get(MEDIUM);
    }

    public BigDecimal getLowVulnerabilityCount() {
        return trackedVulnerabilities.get(LOW);
    }

    public String getAllCounts() {
        StringBuilder countBuilder = new StringBuilder();
        countBuilder.append(getCriticalVulnerabilityCount());
        countBuilder.append(" Critical, ");
        countBuilder.append(getHighVulnerabilityCount());
        countBuilder.append(" High, ");
        countBuilder.append(getMediumVulnerabilityCount());
        countBuilder.append(" Medium, ");
        countBuilder.append(getLowVulnerabilityCount());
        countBuilder.append(" Low.");
        return countBuilder.toString();
    }

}
