/**
 * blackduck-nexus3
 *
 * Copyright (C) 2018 Black Duck Software, Inc.
 * http://www.blackducksoftware.com/
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package com.synopsys.integration.blackduck.nexus3.task.common;

import java.util.HashMap;
import java.util.Map;

public class VulnerabilityLevels {
    public static final String HIGH_VULNERABILITY = "HIGH";
    public static final String MEDIUM_VULNERABILITY = "MEDIUM";
    public static final String LOW_VULNERABILITY = "LOW";

    private final Map<String, Integer> trackedVulnerabilities;

    public VulnerabilityLevels() {
        trackedVulnerabilities = new HashMap<>();
    }

    public void addVulnerability(final String vulnerability) {
        addXVulnerabilities(vulnerability, 1);
    }

    public void addXVulnerabilities(final String vulnerability, final int count) {
        final int vulnerabilityCount = getVulnerabilityCount(vulnerability, 0);
        trackedVulnerabilities.put(vulnerability, vulnerabilityCount + count);
    }

    public int getVulnerabilityCount(final String vulnerability, final int defaultValue) {
        final Integer count = trackedVulnerabilities.get(vulnerability);
        if (count == null) {
            return defaultValue;
        }
        return count;
    }

    public int getHighVulnerabilityCount() {
        return getVulnerabilityCount(HIGH_VULNERABILITY, 0);
    }

    public int getMediumVulnerabilityCount() {
        return getVulnerabilityCount(MEDIUM_VULNERABILITY, 0);
    }

    public int getLowVulnerabilityCount() {
        return getVulnerabilityCount(LOW_VULNERABILITY, 0);
    }

    public String getAllCounts() {
        final StringBuilder countBuilder = new StringBuilder();
        countBuilder.append(getHighVulnerabilityCount());
        countBuilder.append(" High, ");
        countBuilder.append(getMediumVulnerabilityCount());
        countBuilder.append(" Medium, ");
        countBuilder.append(getLowVulnerabilityCount());
        countBuilder.append(" Low.");
        return countBuilder.toString();
    }
}
